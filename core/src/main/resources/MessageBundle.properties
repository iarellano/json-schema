# Copyright (c) 2019 Isaias Arellano - isaias.arellano.delgado@gmail.com
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# org.everit.json.schema.NumberSchemaValidatingVisitor
number.multipleOf=%1$s is not a multiple of %2$s
number.exclusiveMaximum.nlt_y=is not less than %1$s
number.exclusiveMaximum.x_nlt_y=%1$s is not less than %2$s
number.maximum.x_nlte_y=%1$s is not less or equal to %2$s
number.exclusiveMinimum.x_ngt_y=%1$s is not greater than %2$s
number.minimum.x_ngte_y=%1$s is not greater or equal to %2$s

# org.everit.json.schema.ArraySchemaValidatingVisitor
array.minItems=expected minimum item count: %1$d, found: %2$d
array.maxItems=expected maximum item count: %1$d, found: %2$d
array.uniqueItems=array items are not unique
array.additionalItems=expected: [%1$d] array items, found: [%2$d]
array.contains=expected at least one array item to match 'contains' schema

# org.everit.json.schema.ConditionalSchemaValidatingVisitor
conditional.then=input is invalid against the "then" schema
conditional.else=input is invalid against both the "if" and "else"

# org.everit.json.schema.ObjectSchemaValidatingVisitor
object.required=required key [%1$s] not found
object.minProperties=minimum size: [%1$d], found: [%2$d]
object.maxProperties=maximum size: [%1$d], found: [%2$d]
object.dependencies=property [%1$s] is required
object.additionalProperties=extraneous key [%1$s] is not permitted

# org.everit.json.schema.StringSchemaValidatingVisitor
string.minLength=expected minLength: %1$d, actual: %2$d
string.maxLength=expected maxLength: %1$d, actual: %2$d
string.pattern=string [%1$s] does not match pattern %2$s

# org.everit.json.schema.CombinedSchema
combined.allOf=only %1$d subschema matches out of %2$d
combined.anyOf=no subschema matched out of the total %1$d subschemas
combined.oneOf=%1$d subschemas matched instead of one

# org.everit.json.schema.ReadOnlyValidator
read-write.readOnly=value is read-only
read-write.writeOnly=value is write-only

# org.everit.json.schema.SchemaException
object.wrong-type=%1$s: expected type: %2$s, found: %3$s
object.wrong-type.one-of=%1$s: expected type is one of %2$s, found: %3$s
object.wrong-type.key=key %1$s: expected type: %2$s , found : %3$s
object.wrong-type.key.one-of=key %1$s: expected type is one of %2$s, found: %3$s
object.or-noun=\u0020or\u0020

# org.everit.json.schema.ValidatingVisitor
object.non-null=value cannot be null
object.null-expected=expected: null, found: %1$s
object.invalid-enum=%1$s is not a valid enum value
object.false=false schema always fails
object.not=subject must not be valid against schema %1$s

# org.everit.json.schema.ValidationException
validations.count=%1$d schema violations found
validations.expected-type=expected type: %1$s, found: %2$s

# org.everit.json.schema.internal.TemporalFormatValidator
format=[%1$s] is not a valid %2$s. Expected %3$s

# org.everit.json.schema.internal.EmailFormatValidator
format.email=[%1$s] is not a valid email address

# org.everit.json.schema.internal.HostnameFormatValidator
format.hostname=[%1$s] is not a valid hostname

# org.everit.json.schema.internal.IPV4Validator
format.ipv4=[%1$s] is not a valid ipv4 address

# org.everit.json.schema.internal.IPV6Validator
format.ipv6=[%1$s] is not a valid ipv6 address

# org.everit.json.schema.internal.JsonPointerFormatValidator
format.json-pointer=[%1$s] is not a valid JSON pointer

# org.everit.json.schema.internal.RegexFormatValidator
format.regex=[%1$s] is not a valid regular expression

# org.everit.json.schema.internal.RelativeJsonPointerFormatValidator
format.relative-json-pointer=[%1$s] is not a valid relative JSON Pointer

# org.everit.json.schema.internal.URIFormatValidator
format.uri=[%1$s] is not a valid URI

# org.everit.json.schema.internal.URIReferenceFormatValidator
format.uri-reference=[%1$s] is not a valid URI reference

# org.everit.json.schema.internal.URITemplateFormatValidator
format.uri-template=[%1$s] is not a valid URI template

# org.everit.json.schema.internal.URIV4FormatValidator
format.uriv4=[%1$s] is not a valid URI

json.query-form="value [%1$s] is not an array or object therefore its key %2$s cannot be resolved"
json.read-by-index-token=index %1$s is out of bounds - the array has %2$d elements